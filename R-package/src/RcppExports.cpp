// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// ridge_solver
arma::mat ridge_solver(arma::mat x, arma::mat y, double lambda);
RcppExport SEXP _regboost_ridge_solver(SEXP xSEXP, SEXP ySEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(ridge_solver(x, y, lambda));
    return rcpp_result_gen;
END_RCPP
}
// metric_fun
double metric_fun(arma::vec y, arma::vec y_hat, std::string metric);
RcppExport SEXP _regboost_metric_fun(SEXP ySEXP, SEXP y_hatSEXP, SEXP metricSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y_hat(y_hatSEXP);
    Rcpp::traits::input_parameter< std::string >::type metric(metricSEXP);
    rcpp_result_gen = Rcpp::wrap(metric_fun(y, y_hat, metric));
    return rcpp_result_gen;
END_RCPP
}
// randomRegression_fit
List randomRegression_fit(arma::mat x, arma::mat y, double colsample, double subsample, arma::uvec holdvar, int n_reg, double lambda, std::string weight_metric, bool intercept);
RcppExport SEXP _regboost_randomRegression_fit(SEXP xSEXP, SEXP ySEXP, SEXP colsampleSEXP, SEXP subsampleSEXP, SEXP holdvarSEXP, SEXP n_regSEXP, SEXP lambdaSEXP, SEXP weight_metricSEXP, SEXP interceptSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type colsample(colsampleSEXP);
    Rcpp::traits::input_parameter< double >::type subsample(subsampleSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type holdvar(holdvarSEXP);
    Rcpp::traits::input_parameter< int >::type n_reg(n_regSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< std::string >::type weight_metric(weight_metricSEXP);
    Rcpp::traits::input_parameter< bool >::type intercept(interceptSEXP);
    rcpp_result_gen = Rcpp::wrap(randomRegression_fit(x, y, colsample, subsample, holdvar, n_reg, lambda, weight_metric, intercept));
    return rcpp_result_gen;
END_RCPP
}
// randomRegression_predict
arma::vec randomRegression_predict(List randomReg, arma::mat xnew);
RcppExport SEXP _regboost_randomRegression_predict(SEXP randomRegSEXP, SEXP xnewSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type randomReg(randomRegSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type xnew(xnewSEXP);
    rcpp_result_gen = Rcpp::wrap(randomRegression_predict(randomReg, xnew));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_hello_world
arma::mat rcpparma_hello_world();
RcppExport SEXP _regboost_rcpparma_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpparma_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_outerproduct
arma::mat rcpparma_outerproduct(const arma::colvec& x);
RcppExport SEXP _regboost_rcpparma_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_innerproduct
double rcpparma_innerproduct(const arma::colvec& x);
RcppExport SEXP _regboost_rcpparma_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_bothproducts
Rcpp::List rcpparma_bothproducts(const arma::colvec& x);
RcppExport SEXP _regboost_rcpparma_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_regboost_ridge_solver", (DL_FUNC) &_regboost_ridge_solver, 3},
    {"_regboost_metric_fun", (DL_FUNC) &_regboost_metric_fun, 3},
    {"_regboost_randomRegression_fit", (DL_FUNC) &_regboost_randomRegression_fit, 9},
    {"_regboost_randomRegression_predict", (DL_FUNC) &_regboost_randomRegression_predict, 2},
    {"_regboost_rcpparma_hello_world", (DL_FUNC) &_regboost_rcpparma_hello_world, 0},
    {"_regboost_rcpparma_outerproduct", (DL_FUNC) &_regboost_rcpparma_outerproduct, 1},
    {"_regboost_rcpparma_innerproduct", (DL_FUNC) &_regboost_rcpparma_innerproduct, 1},
    {"_regboost_rcpparma_bothproducts", (DL_FUNC) &_regboost_rcpparma_bothproducts, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_regboost(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
